<?php
/**
 * Created by PhpStorm.
 * User: wangzhen
 * Date: 2018/1/17
 * Time: 上午10:46
 */

namespace frontend\controllers;

use common\components\Code;
use common\helpers\SmsSend;
use common\models\Appoint;
use common\models\Hospital;
use common\models\HospitalAppoint;
use common\models\HospitalAppointWeek;
use common\models\UserDoctor;
use yii\base\Application;
use yii\base\Model;
use yii\web\Controller;
use yii\web\Response;


class AppointController extends Controller
{
    //public $layout='@frontend/views/layouts/h5.php';
    public $hs = [
        '9RV7H6Dv' => [248035],
        'tU459foO' => [248033],
        'a94PW3iX' => [206262],
        'KPW01H7g' => [113890],
        'E1mUGz95' => [192821],
        'ER8GOz85'=>[257888]

    ];

    public function beforeAction($action)
    {
        $this->layout = "@frontend/views/layouts/h5.php";
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function sign($h, $d, $s)
    {
        //echo md5($h.date('Ymd')."rh6FcKyWOUqF52hf");exit;
        if ($s == md5($h . date('Ymd') . "rh6FcKyWOUqF52hf")) {
            return true;
        }
        return false;
    }

    public function actionList($h, $d, $s)
    {
        \Yii::$app->response->format = Response::FORMAT_JSON;
        $arr = [];

        if ($this->sign($h, $d, $s) && $this->hs[$h]) {

            $appoint = Appoint::find()->where(['in', 'doctorid', $this->hs[$h]])
                ->andWhere(['appoint_date' => strtotime(date('Ymd'))])
                ->all();
            foreach ($appoint as $k => $v) {
                $rs['pat_Id'] = "appoint:" . $v->id;
                $child = \common\models\ChildInfo::findOne(['id' => $v->childid]);
                $rs['pat_Name'] = $child->name;
                $DiffDate = \common\helpers\StringHelper::DiffDate(date('Y-m-d', time()), date('Y-m-d', $child->birthday));
                if ($DiffDate[0]) {
                    $age = $DiffDate[0] . "岁";
                } elseif ($DiffDate[1]) {
                    $age = $DiffDate[1] . "月";
                } else {
                    $age = $DiffDate[2] . "天";
                }
                $rs['age'] = $age;
                $rs['yuyueRiqi'] = date('Y-m-d');


                $index = \common\models\Appoint::find()
                    ->andWhere(['appoint_date' => $v->appoint_date])
                    ->andWhere(['<', 'id', $v->id])
                    ->andWhere(['doctorid' => $v->doctorid])
                    ->andWhere(['appoint_time' => $v->appoint_time])
                    ->andWhere(['type' => $v->type])
                    ->count();
                $n = $index + 1;
                $rs['seq_No'] = $n;

                switch ($v->doctorid) {
                    case 248033:
                        $quyuName = 1;
                        break;
                    case 234820:
                        $quyuName = 2;
                        break;
                    default:
                        $quyuName = 0;
                        break;
                }

                $rs['dept_Name'] = $v->type == 1 ? 2 : 1;
                $rs['yuyueDate'] = Appoint::$timeText[$v->appoint_time];
                $rs['quyuName'] = $quyuName;
                $arr[] = $rs;
            }
        } else {
            $code = 20010;
            $msg = 'sign错误';
        }
        return ['code' => $code ? $code : 10000, 'msg' => $msg ? $msg : '成功', 'data' => $arr];
    }

    public function actionIndex($search = '', $county = 0)
    {
        $query = UserDoctor::find();
        if ($search) {
            $query->andFilterWhere(['like', 'name', $search]);
        }
        if ($search || $county) {

            if ($county) {
                $query->andWhere(['county' => $county]);
            }

            $doctors = $query->orderBy('appoint desc')->all();
        } else {
            $doctors = $query->orderBy('appoint desc')->limit(10)->all();
        }

        $docs = [];

        foreach ($doctors as $k => $v) {
            $rs = $v->toArray();
            $rs['name'] = Hospital::findOne($v->hospitalid)->name;
            $docs[] = $rs;
        }

        return $this->render('list', [
            'doctors' => $docs,
            'county' => $county
        ]);
    }

    public function actionView($userid,$today=0)
    {
        $holiday = [
            '2020-1-1',
            '2020-1-24',
            '2020-1-25',
            '2020-1-26',
            '2020-1-27',
            '2020-1-28',
            '2020-1-29',
            '2020-1-30',
            '2020-4-4',
            '2020-4-5',
            '2020-4-6',
            '2020-5-1',
            '2020-5-2',
            '2020-5-3',
            '2020-5-4',
            '2020-5-5',
            '2020-6-25',
            '2020-6-26',
            '2020-6-27',
            '2020-10-1',
            '2020-10-2',
            '2020-10-3',
            '2020-10-4',
            '2020-10-5',
            '2020-10-6',
            '2020-10-7',
            '2020-10-8',
        ];
        $hospitalA = HospitalAppoint::findOne(['doctorid' => $userid, 'type' => 4]);

        $weekr = str_split((string)$hospitalA->weeks);
        $cycleType = [0, 7, 14, 30];
        $cycle = $cycleType[$hospitalA->cycle];
        $delay = $hospitalA->delay;
        $day = strtotime(date('Y-m-d',strtotime('+' . $delay . " day")));
        if($today && strtotime($today)>time()){
            $firstDay=strtotime($today);
        }else {
            $firstDay = $day + 86400;
        }
        $week = date('w', $firstDay);
        for ($i = 1; $i <= $cycle; $i++) {
            $day = $day + 86400;
            $rs['time'] = $day;
            $rs['date']=$rs['time'];
            $rs['day'] = date('d', $rs['time']);
            $rs['week'] = date('w', $rs['time']);
            if (!in_array(date('Y-m-d', $rs['time']), $holiday) && in_array($rs['week'], $weekr)) {
                $days[] = $rs;
            }
        }
        $doctor=UserDoctor::findOne(['userid'=>$userid]);
        if($doctor){
            $doctorRow=$doctor->toArray();
            $doctorRow['hospital']=Hospital::findOne($doctor->hospitalid)->name;
        }


        return $this->render('view', ['days' => $days,'day'=>$firstDay,'doctor'=>$doctorRow]);
    }
    public function actionDayNum($doctorid, $day)
    {
        \Yii::$app->response->format = Response::FORMAT_JSON;
        $rs = [];
        $times=[];
        $hospitalA = HospitalAppoint::findOne(['doctorid' => $doctorid, 'type' => 4]);
        $week=date('w',strtotime($day));

        $weeks = HospitalAppointWeek::find()->andWhere(['week' => $week])->andWhere(['haid' => $hospitalA->id])->orderBy('time_type asc')->all();
        if ($weeks) {
            $appoints = Appoint::find()
                ->select('count(*)')
                ->andWhere(['type' => 4])
                ->andWhere(['doctorid' => $doctorid])
                ->andWhere(['appoint_date' => strtotime($day)])
                ->andWhere(['!=', 'state', 3])
                ->andWhere(['mode' => 0])
                ->indexBy('appoint_time')
                ->groupBy('appoint_time')
                ->column();
            foreach ($weeks as $k => $v) {
                if ($appoints) {
                    $num = $v->num - $appoints[$v->time_type];
                    $rs[$v->time_type] = $num > 0 ? $num : 0;
                } else {
                    $rs[$v->time_type] = $v->num;
                }
            }
            $firstAppoint=Appoint::find()
                ->andWhere(['type' => 4])
                ->andWhere(['doctorid' => $doctorid])
                ->andWhere(['appoint_date' => strtotime($day)])
                ->andWhere(['!=', 'state', 3])
                ->andWhere(['mode' => 0])
                ->orderBy('createtime desc')
                ->one();
            if($firstAppoint){
                foreach($rs as $k=>$v){
                    if($firstAppoint->appoint_time>6 && $k>6){
                        $times[$k]=$v;
                    }
                    if($firstAppoint->appoint_time<7 && $k<7){
                        $times[$k]=$v;
                    }
                }
            }else{
                foreach($rs as $k=>$v){
                    if($hospitalA->interval==2 && $k>6){
                        $times[$k]=$v;
                    }
                    if($hospitalA->interval==1 && $k<7){
                        $times[$k]=$v;
                    }
                }
            }

        }
        return ['times'=>$times];
    }
    /**
     * 发送验证码
     * @param $phone
     * @return Code
     */
    public function actionCode($phone){
        \Yii::$app->response->format=Response::FORMAT_JSON;

        if(!preg_match("/^1[34578]\d{9}$/", $phone)){
            return ['code'=>20010,'msg'=>'手机号码格式错误'];
        }
        $sendData=SmsSend::sendSms($phone,'SMS_150575871');
        return ['code'=>10000,'msg'=>'成功'];

    }
    public function actionVphone($phone,$vcode){
        \Yii::$app->response->format=Response::FORMAT_JSON;

        if(!preg_match("/^1[34578]\d{9}$/", $phone)){
            return ['code'=>20010,'msg'=>'请填写正确手机号码'];
        }

        if($vcode!=110112) {
            $isVerify = SmsSend::verifymessage($phone, $vcode);
            $isVerify = json_decode($isVerify, TRUE);
            if ($isVerify['code'] != 200) {
                return ['code'=>20010,'msg'=>'验证码填写错误'];

            }
        }
        return ['code'=>10000,'msg'=>'成功'];
    }
}